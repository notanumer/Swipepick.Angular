{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthApiService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  get token() {\n    return '';\n  }\n  login(user) {\n    return this.http.post(this.baseUrl + 'api/auth/login', user);\n  }\n  register(user) {\n    return this.http.post(this.baseUrl + 'api/auth/register ', user);\n  }\n  logout() {}\n  isAuthenticated() {\n    return !!this.token;\n  }\n  setToken(response) {\n    if (response) {\n      const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000);\n      localStorage.setItem('fb-token', response.idToken);\n      localStorage.setItem('fb-token-exp', expDate.toString());\n    } else {\n      localStorage.clear();\n    }\n  }\n}\nAuthApiService.ɵfac = function AuthApiService_Factory(t) {\n  return new (t || AuthApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthApiService,\n  factory: AuthApiService.ɵfac\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,cAAc;EAEzBC,YAAoBC,IAAgB,EAA8BC,OAAe;IAA7D,SAAI,GAAJD,IAAI;IAA0C,YAAO,GAAPC,OAAO;EACzE;EAEA,IAAIC,KAAK;IACP,OAAO,EAAE;EACX;EAEAC,KAAK,CAACC,IAAe;IACnB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,IAAI,CAACJ,OAAO,GAAG,gBAAgB,EAAEG,IAAI,CAAC;EAG9D;EAEAE,QAAQ,CAACF,IAAkB;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,IAAI,CAACJ,OAAO,GAAG,oBAAoB,EAAEG,IAAI,CAAC;EAClE;EAEAG,MAAM,IAEN;EAEAC,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACN,KAAK;EACrB;EAEQO,QAAQ,CAACC,QAA+B;IAC9C,IAAIA,QAAQ,EAAE;MACZ,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,CAACH,QAAQ,CAACI,SAAS,GAAG,IAAI,CAAC;MAC3EC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEN,QAAQ,CAACO,OAAO,CAAC;MAClDF,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEL,OAAO,CAACO,QAAQ,EAAE,CAAC;KACzD,MAAM;MACLH,YAAY,CAACI,KAAK,EAAE;;EAExB;;AAnCWrB,cAAc;mBAAdA,cAAc,0CAEqB,UAAU;AAAA;AAF7CA,cAAc;SAAdA,cAAc;EAAAsB,SAAdtB,cAAc;AAAA","names":["AuthApiService","constructor","http","baseUrl","token","login","user","post","register","logout","isAuthenticated","setToken","response","expDate","Date","getTime","expiresIn","localStorage","setItem","idToken","toString","clear","factory"],"sourceRoot":"","sources":["D:\\Swipepick.Angular\\src\\Swipepick.Angular.Web\\ClientApp\\src\\app\\shared\\services\\auth-api.service.ts"],"sourcesContent":["import {Inject, Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {UserLogin, UserRegister} from \"../interfaces\";\r\nimport {catchError, Observable, tap} from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class AuthApiService {\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n  }\r\n\r\n  get token(): string {\r\n    return ''\r\n  }\r\n\r\n  login(user: UserLogin): Observable<any> {\r\n    return this.http.post(this.baseUrl + 'api/auth/login', user)\r\n\r\n\r\n  }\r\n\r\n  register(user: UserRegister): Observable<any> {\r\n    return this.http.post(this.baseUrl + 'api/auth/register ', user)\r\n  }\r\n\r\n  logout() {\r\n\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.token\r\n  }\r\n\r\n  private setToken(response: FbAuthResponse | null) {\r\n    if (response) {\r\n      const expDate = new Date(new Date().getTime() + +response.expiresIn * 1000)\r\n      localStorage.setItem('fb-token', response.idToken)\r\n      localStorage.setItem('fb-token-exp', expDate.toString())\r\n    } else {\r\n      localStorage.clear()\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}