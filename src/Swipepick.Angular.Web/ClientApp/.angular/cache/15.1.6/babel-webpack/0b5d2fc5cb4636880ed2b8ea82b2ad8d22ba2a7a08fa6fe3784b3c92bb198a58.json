{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthApiService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': this.basic\n    });\n  }\n  get token() {\n    return localStorage.getItem('token');\n  }\n  login(user) {\n    return this.http.post(this.baseUrl + 'api/auth/login', user, {\n      headers: this.headers\n    });\n  }\n  autoLogin(token) {\n    if (token) {\n      return this.http.post(this.baseUrl + 'api/auth/login', token);\n    }\n  }\n  register(user) {\n    return this.http.post(this.baseUrl + 'api/auth/register', user);\n  }\n  logout() {\n    this.setToken(null);\n  }\n  isAuthenticated() {\n    return !!this.token;\n  }\n  setToken(response) {\n    if (response) {\n      localStorage.setItem('token', response.token);\n    } else {\n      localStorage.clear();\n    }\n  }\n}\nAuthApiService.ɵfac = function AuthApiService_Factory(t) {\n  return new (t || AuthApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthApiService,\n  factory: AuthApiService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;AAK5D,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,IAAgB,EAA8BC,OAAe;IAA7D,SAAI,GAAJD,IAAI;IAA0C,YAAO,GAAPC,OAAO;IAJzE,YAAO,GAAG,IAAIJ,WAAW,CAAC;MACxB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,IAAI,CAACK;KAAO,CAAC;EAEoD;EAEpF,IAAIC,KAAK;IACP,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,KAAK,CAACC,IAAe;IACnB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,OAAO,GAAG,gBAAgB,EAAEM,IAAI,EAAE;MAACE,OAAO,EAAE,IAAI,CAACA;IAAO,CAAC,CAAE;EAGxF;EAEAC,SAAS,CAACP,KAAoB;IAC5B,IAAIA,KAAK,EAAE;MACT,OAAO,IAAI,CAACH,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,OAAO,GAAG,gBAAgB,EAAEE,KAAK,CAAC;;EAEjE;EAEAQ,QAAQ,CAACJ,IAAkB;IACzB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACP,OAAO,GAAG,mBAAmB,EAAEM,IAAI,CAAC;EACjE;EAEAK,MAAM;IACJ,IAAI,CAACC,QAAQ,CAAC,IAAI,CAAC;EACrB;EAEAC,eAAe;IACb,OAAO,CAAC,CAAC,IAAI,CAACX,KAAK;EACrB;EAEQU,QAAQ,CAACE,QAAkC;IACjD,IAAIA,QAAQ,EAAE;MACZX,YAAY,CAACY,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACZ,KAAK,CAAC;KAC9C,MAAM;MACLC,YAAY,CAACa,KAAK,EAAE;;EAExB;;AA1CWnB,cAAc;mBAAdA,cAAc,0CAMqB,UAAU;AAAA;AAN7CA,cAAc;SAAdA,cAAc;EAAAoB,SAAdpB,cAAc;AAAA","names":["HttpHeaders","AuthApiService","constructor","http","baseUrl","basic","token","localStorage","getItem","login","user","post","headers","autoLogin","register","logout","setToken","isAuthenticated","response","setItem","clear","factory"],"sourceRoot":"","sources":["D:\\Swipepick.Angular\\src\\Swipepick.Angular.Web\\ClientApp\\src\\app\\shared\\services\\auth-api.service.ts"],"sourcesContent":["import {Inject, Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {catchError, Observable, tap} from \"rxjs\";\r\nimport {UserLogin, UserLoginResponse, UserRegister} from \"../interfaces/auth-interfaces\";\r\n\r\n@Injectable()\r\nexport class AuthApiService {\r\n\r\n  headers = new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n    'Authorization': this.basic });\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {}\r\n\r\n  get token(): string | null {\r\n    return localStorage.getItem('token')\r\n  }\r\n\r\n  login(user: UserLogin): Observable<any> {\r\n    return this.http.post(this.baseUrl + 'api/auth/login', user, {headers: this.headers} )\r\n\r\n\r\n  }\r\n\r\n  autoLogin(token: string | null): Observable<any> | void{\r\n    if (token) {\r\n      return this.http.post(this.baseUrl + 'api/auth/login', token)\r\n    }\r\n  }\r\n\r\n  register(user: UserRegister): Observable<any> {\r\n    return this.http.post(this.baseUrl + 'api/auth/register', user)\r\n  }\r\n\r\n  logout() {\r\n    this.setToken(null)\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return !!this.token\r\n  }\r\n\r\n  private setToken(response: UserLoginResponse | null) {\r\n    if (response) {\r\n      localStorage.setItem('token', response.token)\r\n    } else {\r\n      localStorage.clear()\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}